class Solution {
    public void dfs( ArrayList<ArrayList<Integer>> adj, int st,int[] vis) {
        vis[st] = 1;
        for(int i = 0; i < adj.get(st).size();i++) {
            if(vis[adj.get(st).get(i)] == 0) {
                dfs(adj,adj.get(st).get(i),vis);
            }
        }
    }
    public int findCircleNum(int[][] isConnected) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        int v = isConnected.length;
        for(int i = 0; i < v;i++) {
            adj.add(new ArrayList<>());
        }
        for(int i = 0; i < v;i++) {
            for(int j = 0; j < v;j++) {
                if(isConnected[i][j] == 1 && i != j) {
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }
        int cnt = 0;
        int[] vis = new int[v];
        for(int i = 0; i < v;i++) {
            if(vis[i] == 0) {
                dfs(adj,i,vis);
                cnt++;
            }
        }
        return cnt;
    }
}
